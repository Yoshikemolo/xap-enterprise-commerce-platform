{
  "info": {
    "name": "XAP Enterprise Commerce - Access Service - Groups API",
    "description": "Complete API collection for Group management in the Access Service. Includes all CRUD operations, hierarchy management, user assignments, permission management, and advanced operations.\n\n## Features\n- ‚úÖ Complete Group CRUD operations\n- ‚úÖ Hierarchical group management\n- ‚úÖ User-group assignments (individual & bulk)\n- ‚úÖ Permission-group assignments (individual & bulk)\n- ‚úÖ Advanced hierarchy queries (ancestors, descendants, paths)\n- ‚úÖ Search and filtering capabilities\n- ‚úÖ Group statistics and analytics\n- ‚úÖ DefaultGroup management\n- ‚úÖ Automated tests for all endpoints\n\n## Base URL\n{{baseUrl}}/api/v1/groups\n\n## Authentication\nAll endpoints require JWT Bearer token in Authorization header.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "groupId",
      "value": "",
      "type": "string"
    },
    {
      "key": "parentGroupId",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "permissionName",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîç Health & Status",
      "item": [
        {
          "name": "Health Check - Access Service",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìã Group CRUD Operations",
      "item": [
        {
          "name": "Get All Groups",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has groups data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Groups have required properties', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data.length > 0) {",
                  "        const group = responseJson.data[0];",
                  "        pm.expect(group).to.have.property('id');",
                  "        pm.expect(group).to.have.property('name');",
                  "        pm.expect(group).to.have.property('description');",
                  "        pm.expect(group).to.have.property('isActive');",
                  "        pm.expect(group).to.have.property('isDefault');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Get Group by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has group data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson).to.have.property('description');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}"]
            }
          }
        },
        {
          "name": "Create New Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has created group data', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('name');",
                  "    pm.expect(responseJson.name).to.equal('Test Group API');",
                  "});",
                  "",
                  "// Store group ID for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('groupId', responseJson.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Group API\",\n  \"description\": \"Test group created via API\",\n  \"isActive\": true,\n  \"parentId\": null,\n  \"metadata\": {\n    \"type\": \"test\",\n    \"createdVia\": \"postman\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups"]
            }
          }
        },
        {
          "name": "Update Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Group was updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.name).to.equal('Updated Test Group');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Group\",\n  \"description\": \"Updated description for test group\",\n  \"isActive\": true,\n  \"metadata\": {\n    \"type\": \"test\",\n    \"updatedVia\": \"postman\",\n    \"version\": \"2.0\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}"]
            }
          }
        },
        {
          "name": "Delete Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}?reason=Test deletion via API",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}"],
              "query": [
                {
                  "key": "reason",
                  "value": "Test deletion via API"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üèóÔ∏è Group Hierarchy Management",
      "item": [
        {
          "name": "Get Group Hierarchy Tree",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is hierarchy array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Hierarchy nodes have children property', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.length > 0) {",
                  "        pm.expect(responseJson[0]).to.have.property('children');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/hierarchy/tree",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "hierarchy", "tree"]
            }
          }
        },
        {
          "name": "Get Group Ancestors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/ancestors",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "ancestors"]
            }
          }
        },
        {
          "name": "Get Group Descendants",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/descendants",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "descendants"]
            }
          }
        },
        {
          "name": "Get Group Children",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/children",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "children"]
            }
          }
        },
        {
          "name": "Move Group to New Parent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"newParentId\": \"{{parentGroupId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/move",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "move"]
            }
          }
        }
      ]
    },
    {
      "name": "üë• User Management",
      "item": [
        {
          "name": "Get Group Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "users"]
            }
          }
        },
        {
          "name": "Add User to Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Remove User from Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "users", "{{userId}}"]
            }
          }
        },
        {
          "name": "Bulk Add Users to Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userIds\": [\n    \"user-id-1\",\n    \"user-id-2\",\n    \"user-id-3\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/users/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "users", "bulk"]
            }
          }
        }
      ]
    },
    {
      "name": "üîê Permission Management",
      "item": [
        {
          "name": "Get Group Permissions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/permissions?includeInherited=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "permissions"],
              "query": [
                {
                  "key": "includeInherited",
                  "value": "true"
                }
              ]
            }
          }
        },
        {
          "name": "Assign Permission to Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/permissions/{{permissionName}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "permissions", "{{permissionName}}"]
            }
          }
        },
        {
          "name": "Remove Permission from Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/permissions/{{permissionName}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "permissions", "{{permissionName}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üîç Search & Special Operations",
      "item": [
        {
          "name": "Search Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/search?term=test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "search"],
              "query": [
                {
                  "key": "term",
                  "value": "test"
                }
              ]
            }
          }
        },
        {
          "name": "Get Active Groups",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/active",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "active"]
            }
          }
        },
        {
          "name": "Get Default Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has default group', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('isDefault');",
                  "    pm.expect(responseJson.isDefault).to.be.true;",
                  "    pm.expect(responseJson.name).to.equal('DefaultGroup');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/default",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "default"]
            }
          }
        },
        {
          "name": "Get Group Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/stats",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "stats"]
            }
          }
        },
        {
          "name": "Get Group Full Information",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/full-info",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "full-info"]
            }
          }
        }
      ]
    },
    {
      "name": "‚ö° Activation Management",
      "item": [
        {
          "name": "Activate Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/activate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "activate"]
            }
          }
        },
        {
          "name": "Deactivate Group",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/{{groupId}}/deactivate?reason=Test deactivation",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "{{groupId}}", "deactivate"],
              "query": [
                {
                  "key": "reason",
                  "value": "Test deactivation"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üß™ Advanced Testing Scenarios",
      "item": [
        {
          "name": "Complete Group Flow Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This is a comprehensive test that demonstrates a complete group management flow",
                  "console.log('Starting complete group flow test...');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test validates an end-to-end group management scenario",
                  "pm.test('Complete flow validation', function () {",
                  "    // This would be implemented as a runner script",
                  "    pm.expect(true).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/groups/hierarchy/tree",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "groups", "hierarchy", "tree"]
            }
          }
        }
      ]
    }
  ]
}