{
  "info": {
    "name": "Products Service Testing",
    "description": "Complete API testing collection for Products Service",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3333",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "Test Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test",
              "host": ["{{baseUrl}}"],
              "path": ["test"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Products Management",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          },
          "response": []
        },
        {
          "name": "Get Product by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/123",
              "host": ["{{baseUrl}}"],
              "path": ["products", "123"]
            }
          },
          "response": []
        },
        {
          "name": "Get Product by ID - Variable",
          "request": {
            "method": "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Advanced Testing",
      "item": [
        {
          "name": "Test Different Product IDs",
          "item": [
            {
              "name": "Product ID 1",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/products/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["products", "1"]
                }
              }
            },
            {
              "name": "Product ID 999",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/products/999",
                  "host": ["{{baseUrl}}"],
                  "path": ["products", "999"]
                }
              }
            },
            {
              "name": "Product ID ABC (String Test)",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/products/ABC",
                  "host": ["{{baseUrl}}"],
                  "path": ["products", "ABC"]
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables if needed",
          "if (!pm.collectionVariables.get('productId')) {",
          "    pm.collectionVariables.set('productId', '123');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test for all requests",
          "pm.test('Response time is less than 1000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "});",
          "",
          "pm.test('Response has timestamp', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('timestamp');",
          "});"
        ]
      }
    }
  ]
}
