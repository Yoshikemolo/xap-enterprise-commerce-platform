{
  "info": {
    "name": "Products Service Advanced Testing",
    "description": "Complete API testing collection for Products Service with Advanced Stock Operations, FIFO/FEFO Logic, Batch Traceability, and Enhanced Product Management",
    "version": "1.3.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3333",
      "type": "string"
    },
    {
      "key": "stockId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "batchNumber",
      "value": "BATCH-2024-001",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "ORDER-TEST-001",
      "type": "string"
    },
    {
      "key": "productId",
      "value": "1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔍 Health & Status",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check should return service info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'ok');",
                  "    pm.expect(jsonData).to.have.property('features');",
                  "    pm.expect(jsonData.features).to.be.an('array');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "    pm.expect(jsonData.version).to.equal('1.1.1');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Endpoints Overview",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test",
              "host": ["{{baseUrl}}"],
              "path": ["test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should list available endpoints', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('availableEndpoints');",
                  "    pm.expect(jsonData.availableEndpoints).to.have.property('products');",
                  "    pm.expect(jsonData.availableEndpoints).to.have.property('stock');",
                  "    pm.expect(jsonData.availableEndpoints).to.have.property('traceability');",
                  "    pm.expect(jsonData.availableEndpoints.products).to.include('POST /products');",
                  "    pm.expect(jsonData.availableEndpoints.products).to.include('PUT /products/:id');",
                  "    pm.expect(jsonData.availableEndpoints.products).to.include('DELETE /products/:id');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📦 Products Management (Enhanced)",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return enhanced product list', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    if (jsonData.data.length > 0) {",
                  "        const product = jsonData.data[0];",
                  "        pm.expect(product).to.have.property('productCode');",
                  "        pm.expect(product).to.have.property('familyName');",
                  "        pm.expect(product).to.have.property('isActive');",
                  "        pm.expect(product).to.have.property('specifications');",
                  "        pm.expect(product).to.have.property('createdAt');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Product by ID (Enhanced)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return enhanced product details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('productCode');",
                  "    pm.expect(jsonData.data).to.have.property('familyName');",
                  "    pm.expect(jsonData.data).to.have.property('isActive');",
                  "    pm.expect(jsonData.data).to.have.property('specifications');",
                  "    pm.expect(jsonData.data).to.have.property('media');",
                  "    pm.expect(jsonData.data).to.have.property('packages');",
                  "    pm.expect(jsonData.data).to.have.property('stockSummary');",
                  "    pm.expect(jsonData.data).to.have.property('createdAt');",
                  "    pm.expect(jsonData.data).to.have.property('updatedAt');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create New Product",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productCode\": \"PROD-TEST-001\",\n  \"name\": \"Test Product via Postman\",\n  \"description\": \"Product created through API testing\",\n  \"familyId\": 10,\n  \"familyName\": \"Test Family\",\n  \"specifications\": [\n    {\n      \"key\": \"weight\",\n      \"value\": \"2.5\",\n      \"unit\": \"kg\"\n    },\n    {\n      \"key\": \"color\",\n      \"value\": \"Red\",\n      \"unit\": \"color\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product creation should work', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('createdAt');",
                  "    pm.expect(jsonData.data).to.have.property('updatedAt');",
                  "    pm.expect(jsonData.data.isActive).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Product",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Product\",\n  \"description\": \"Updated product description\",\n  \"specifications\": [\n    {\n      \"key\": \"weight\",\n      \"value\": \"3.0\",\n      \"unit\": \"kg\"\n    },\n    {\n      \"key\": \"color\",\n      \"value\": \"Blue\",\n      \"unit\": \"color\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product update should work', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('updatedAt');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Product",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Product deletion should work', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('deletedAt');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📊 Stock Management",
      "item": [
        {
          "name": "Get All Stock Records",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stock",
              "host": ["{{baseUrl}}"],
              "path": ["stock"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return stock records with pagination', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    pm.expect(jsonData.pagination).to.have.property('total');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Stock with Batches",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stock/{{stockId}}",
              "host": ["{{baseUrl}}"],
              "path": ["stock", "{{stockId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return stock record with batches', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('batches');",
                  "    pm.expect(jsonData.data.batches).to.be.an('array');",
                  "    pm.expect(jsonData.data).to.have.property('totalQuantity');",
                  "    pm.expect(jsonData.data).to.have.property('availableQuantity');",
                  "    pm.expect(jsonData.data).to.have.property('reservedQuantity');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Stock Record",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productId\": 3,\n  \"productCode\": \"PROD-003\",\n  \"locationId\": 102,\n  \"locationName\": \"Warehouse C\",\n  \"minimumLevel\": 25,\n  \"maximumLevel\": 500,\n  \"reorderPoint\": 50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stock",
              "host": ["{{baseUrl}}"],
              "path": ["stock"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Stock creation should work', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data.totalQuantity).to.equal(0);",
                  "    pm.expect(jsonData.data.availableQuantity).to.equal(0);",
                  "    pm.expect(jsonData.data.reservedQuantity).to.equal(0);",
                  "    pm.expect(jsonData.data.isActive).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Add New Batch",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"batchNumber\": \"BATCH-2025-TEST-001\",\n  \"quantity\": 200,\n  \"productionDate\": \"2025-06-24T00:00:00Z\",\n  \"expirationDate\": \"2026-06-24T00:00:00Z\",\n  \"supplier\": \"Test Supplier\",\n  \"cost\": 15.75,\n  \"location\": \"A-02-01\",\n  \"metadata\": {\n    \"quality\": \"A+\",\n    \"certifications\": [\"ISO9001\", \"ORGANIC\"],\n    \"temperature\": \"Room Temperature\"\n  },\n  \"reason\": \"New batch for testing\",\n  \"createdBy\": \"postman-tester\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stock/{{stockId}}/batches",
              "host": ["{{baseUrl}}"],
              "path": ["stock", "{{stockId}}", "batches"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Batch creation should update stock totals', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('batch');",
                  "    pm.expect(jsonData.data).to.have.property('stockUpdate');",
                  "    pm.expect(jsonData.data.batch).to.have.property('batchNumber');",
                  "    pm.expect(jsonData.data.batch.status).to.equal('AVAILABLE');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔄 Advanced Stock Operations (FIFO/FEFO)",
      "item": [
        {
          "name": "Reserve Stock (FEFO Logic)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 75,\n  \"orderId\": \"{{orderId}}\",\n  \"preferFEFO\": true,\n  \"reservedBy\": \"postman-tester\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stock/{{stockId}}/reserve",
              "host": ["{{baseUrl}}"],
              "path": ["stock", "{{stockId}}", "reserve"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Stock reservation should use FEFO logic', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('algorithm');",
                  "    pm.expect(jsonData.data.algorithm).to.include('FEFO');",
                  "    pm.expect(jsonData.data).to.have.property('reservations');",
                  "    pm.expect(jsonData.data.reservations).to.be.an('array');",
                  "    pm.expect(jsonData.data).to.have.property('totalReserved');",
                  "    pm.expect(jsonData.data.totalReserved).to.equal(75);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Reserve Stock (FIFO Logic)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"quantity\": 50,\n  \"orderId\": \"ORDER-FIFO-TEST\",\n  \"preferFEFO\": false,\n  \"reservedBy\": \"postman-tester\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stock/{{stockId}}/reserve",
              "host": ["{{baseUrl}}"],
              "path": ["stock", "{{stockId}}", "reserve"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Stock reservation should use FIFO logic', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.algorithm).to.include('FIFO');",
                  "    pm.expect(jsonData.data).to.have.property('reservations');",
                  "    pm.expect(jsonData.data.totalReserved).to.equal(50);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Consume Reserved Stock",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"batchNumber\": \"{{batchNumber}}\",\n  \"quantity\": 25,\n  \"orderId\": \"{{orderId}}\",\n  \"consumedBy\": \"postman-tester\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stock/{{stockId}}/consume",
              "host": ["{{baseUrl}}"],
              "path": ["stock", "{{stockId}}", "consume"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Stock consumption should update quantities', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('consumedQuantity');",
                  "    pm.expect(jsonData.data).to.have.property('batchUpdate');",
                  "    pm.expect(jsonData.data).to.have.property('stockUpdate');",
                  "    pm.expect(jsonData.data.consumedQuantity).to.equal(25);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Release Stock Reservation",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"batchNumber\": \"{{batchNumber}}\",\n  \"quantity\": 15,\n  \"orderId\": \"{{orderId}}\",\n  \"reason\": \"Order cancelled - releasing reservation\",\n  \"releasedBy\": \"postman-tester\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/stock/{{stockId}}/release",
              "host": ["{{baseUrl}}"],
              "path": ["stock", "{{stockId}}", "release"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Stock release should update quantities', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('releasedQuantity');",
                  "    pm.expect(jsonData.data).to.have.property('reason');",
                  "    pm.expect(jsonData.data.releasedQuantity).to.equal(15);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🔍 Batch Traceability",
      "item": [
        {
          "name": "Complete Batch Traceability",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/batches/{{batchNumber}}/traceability",
              "host": ["{{baseUrl}}"],
              "path": ["batches", "{{batchNumber}}", "traceability"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Traceability should include comprehensive analytics', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('batch');",
                  "    pm.expect(jsonData.data).to.have.property('movements');",
                  "    pm.expect(jsonData.data).to.have.property('analytics');",
                  "    pm.expect(jsonData.data).to.have.property('product');",
                  "    pm.expect(jsonData.data).to.have.property('location');",
                  "    pm.expect(jsonData.data.analytics).to.have.property('utilizationPercentage');",
                  "    pm.expect(jsonData.data.analytics).to.have.property('daysInStock');",
                  "    pm.expect(jsonData.data.analytics).to.have.property('turnoverRate');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Batches by Product Code",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/batches/product/PROD-001",
              "host": ["{{baseUrl}}"],
              "path": ["batches", "product", "PROD-001"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return all batches for product', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('productCode');",
                  "    pm.expect(jsonData.data).to.have.property('totalBatches');",
                  "    pm.expect(jsonData.data).to.have.property('batches');",
                  "    pm.expect(jsonData.data.batches).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Expiring Batches (30 days)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/batches/expiring?days=30",
              "host": ["{{baseUrl}}"],
              "path": ["batches", "expiring"],
              "query": [
                {
                  "key": "days",
                  "value": "30"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return expiration analysis with urgency levels', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('summary');",
                  "    pm.expect(jsonData.data).to.have.property('expiringBatches');",
                  "    pm.expect(jsonData.data).to.have.property('searchCriteria');",
                  "    pm.expect(jsonData.data.summary).to.have.property('expired');",
                  "    pm.expect(jsonData.data.summary).to.have.property('critical');",
                  "    pm.expect(jsonData.data.summary).to.have.property('warning');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Expiring Batches (7 days - Critical)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/batches/expiring?days=7",
              "host": ["{{baseUrl}}"],
              "path": ["batches", "expiring"],
              "query": [
                {
                  "key": "days",
                  "value": "7"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should prioritize critical expiring batches', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    if (jsonData.data.expiringBatches.length > 0) {",
                  "        const batch = jsonData.data.expiringBatches[0];",
                  "        pm.expect(batch).to.have.property('urgencyLevel');",
                  "        pm.expect(batch).to.have.property('daysUntilExpiration');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📈 Stock Movements & Audit Trail",
      "item": [
        {
          "name": "All Stock Movements",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/movements",
              "host": ["{{baseUrl}}"],
              "path": ["movements"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return comprehensive movement data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('movements');",
                  "    pm.expect(jsonData.data).to.have.property('summary');",
                  "    pm.expect(jsonData.data.summary).to.have.property('inbound');",
                  "    pm.expect(jsonData.data.summary).to.have.property('outbound');",
                  "    pm.expect(jsonData.data.summary).to.have.property('adjustments');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Movements by Stock ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stock/{{stockId}}/movements",
              "host": ["{{baseUrl}}"],
              "path": ["stock", "{{stockId}}", "movements"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should filter movements by stock ID', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.filters).to.have.property('stockId');",
                  "    pm.expect(jsonData.data.filters.stockId).to.equal(parseInt('{{stockId}}'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Movements by Batch Number",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/movements?batchNumber={{batchNumber}}",
              "host": ["{{baseUrl}}"],
              "path": ["movements"],
              "query": [
                {
                  "key": "batchNumber",
                  "value": "{{batchNumber}}"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should filter movements by batch number', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.filters).to.have.property('batchNumber');",
                  "    pm.expect(jsonData.data.filters.batchNumber).to.equal('{{batchNumber}}');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Movements by Type (RESERVED)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/movements?type=RESERVED",
              "host": ["{{baseUrl}}"],
              "path": ["movements"],
              "query": [
                {
                  "key": "type",
                  "value": "RESERVED"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should filter movements by type', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data.filters).to.have.property('movementType');",
                  "    pm.expect(jsonData.data.filters.movementType).to.equal('RESERVED');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "⚠️ Alerts & Analytics",
      "item": [
        {
          "name": "Low Stock Alerts",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/stock/alerts/low-stock",
              "host": ["{{baseUrl}}"],
              "path": ["stock", "alerts", "low-stock"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return low stock alerts', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('alerts');",
                  "    pm.expect(jsonData.data.alerts).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Inventory Analytics Summary",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/analytics/inventory-summary",
              "host": ["{{baseUrl}}"],
              "path": ["analytics", "inventory-summary"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Should return comprehensive analytics', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.data).to.have.property('totalProducts');",
                  "    pm.expect(jsonData.data).to.have.property('totalBatches');",
                  "    pm.expect(jsonData.data).to.have.property('totalStockValue');",
                  "    pm.expect(jsonData.data).to.have.property('expiringBatches');",
                  "    pm.expect(jsonData.data).to.have.property('lowStockAlerts');",
                  "    pm.expect(jsonData.data).to.have.property('averageUtilization');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🧪 Advanced Testing Scenarios",
      "item": [
        {
          "name": "Complete Stock Flow Test",
          "item": [
            {
              "name": "1. Create Stock Record for Flow Test",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"productId\": 999,\n  \"productCode\": \"PROD-FLOW-TEST\",\n  \"locationId\": 999,\n  \"locationName\": \"Test Warehouse\",\n  \"minimumLevel\": 10,\n  \"maximumLevel\": 1000,\n  \"reorderPoint\": 25\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/stock",
                  "host": ["{{baseUrl}}"],
                  "path": ["stock"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Flow test stock creation should work', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data).to.have.property('id');",
                      "    // Store the created stock ID for subsequent tests",
                      "    pm.environment.set('flowTestStockId', jsonData.data.id);",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "2. Add First Batch (Older Production)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"batchNumber\": \"FLOW-BATCH-001\",\n  \"quantity\": 100,\n  \"productionDate\": \"2025-01-01T00:00:00Z\",\n  \"expirationDate\": \"2025-12-31T00:00:00Z\",\n  \"supplier\": \"Flow Test Supplier A\",\n  \"cost\": 10.00,\n  \"location\": \"TEST-01-01\",\n  \"reason\": \"First batch for flow testing\",\n  \"createdBy\": \"flow-tester\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/stock/{{flowTestStockId}}/batches",
                  "host": ["{{baseUrl}}"],
                  "path": ["stock", "{{flowTestStockId}}", "batches"]
                }
              },
              "event": [
                {
                  "listen": "pre-request",
                  "script": {
                    "exec": [
                      "// Use the stock ID from the previous test",
                      "const stockId = pm.environment.get('flowTestStockId') || '3';",
                      "pm.globals.set('flowTestStockId', stockId);"
                    ]
                  }
                }
              ]
            },
            {
              "name": "3. Add Second Batch (Newer, Expires Earlier)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"batchNumber\": \"FLOW-BATCH-002\",\n  \"quantity\": 150,\n  \"productionDate\": \"2025-06-01T00:00:00Z\",\n  \"expirationDate\": \"2025-10-01T00:00:00Z\",\n  \"supplier\": \"Flow Test Supplier B\",\n  \"cost\": 12.00,\n  \"location\": \"TEST-01-02\",\n  \"reason\": \"Second batch - expires earlier\",\n  \"createdBy\": \"flow-tester\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/stock/{{flowTestStockId}}/batches",
                  "host": ["{{baseUrl}}"],
                  "path": ["stock", "{{flowTestStockId}}", "batches"]
                }
              }
            },
            {
              "name": "4. Test FEFO Reservation (Should pick earlier expiry)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 75,\n  \"orderId\": \"FLOW-ORDER-FEFO\",\n  \"preferFEFO\": true,\n  \"reservedBy\": \"flow-tester\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/stock/{{flowTestStockId}}/reserve",
                  "host": ["{{baseUrl}}"],
                  "path": ["stock", "{{flowTestStockId}}", "reserve"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('FEFO should pick batch with earlier expiration', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.algorithm).to.include('FEFO');",
                      "    // Should prioritize FLOW-BATCH-002 (expires 2025-10-01) over FLOW-BATCH-001 (expires 2025-12-31)",
                      "    const firstReservation = jsonData.data.reservations[0];",
                      "    pm.expect(firstReservation.batchNumber).to.equal('FLOW-BATCH-002');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "5. Test FIFO Reservation (Should pick older production)",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"quantity\": 50,\n  \"orderId\": \"FLOW-ORDER-FIFO\",\n  \"preferFEFO\": false,\n  \"reservedBy\": \"flow-tester\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/stock/{{flowTestStockId}}/reserve",
                  "host": ["{{baseUrl}}"],
                  "path": ["stock", "{{flowTestStockId}}", "reserve"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('FIFO should pick batch with earlier production', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.algorithm).to.include('FIFO');",
                      "    // Should prioritize FLOW-BATCH-001 (produced 2025-01-01) over FLOW-BATCH-002 (produced 2025-06-01)",
                      "    const firstReservation = jsonData.data.reservations[0];",
                      "    pm.expect(firstReservation.batchNumber).to.equal('FLOW-BATCH-001');",
                      "});"
                    ]
                  }
                }
              ]
            },
            {
              "name": "6. Verify Complete Traceability",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/batches/FLOW-BATCH-001/traceability",
                  "host": ["{{baseUrl}}"],
                  "path": ["batches", "FLOW-BATCH-001", "traceability"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Should have complete audit trail of flow test', function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "    pm.expect(jsonData.data.movements.length).to.be.greaterThan(0);",
                      "    const hasInbound = jsonData.data.movements.some(m => m.movementType === 'INBOUND');",
                      "    const hasReserved = jsonData.data.movements.some(m => m.movementType === 'RESERVED');",
                      "    pm.expect(hasInbound).to.be.true;",
                      "    pm.expect(hasReserved).to.be.true;",
                      "});"
                    ]
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}